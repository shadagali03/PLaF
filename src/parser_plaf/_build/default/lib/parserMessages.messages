prog: UNITTYPE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE UNPAIR
##
## Ends in an error in state: 1.
##
## iface_or_class_decl -> INTERFACE . ID LBRACE list(abstract_method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID UNPAIR
##
## Ends in an error in state: 2.
##
## iface_or_class_decl -> INTERFACE ID . LBRACE list(abstract_method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INTERFACE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE UNPAIR
##
## Ends in an error in state: 3.
##
## iface_or_class_decl -> INTERFACE ID LBRACE . list(abstract_method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INTERFACE ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD UNPAIR
##
## Ends in an error in state: 4.
##
## abstract_method_decl -> METHOD . texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD REFTYPE UNPAIR
##
## Ends in an error in state: 6.
##
## texpr -> REFTYPE . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## REFTYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD LPAREN UNPAIR
##
## Ends in an error in state: 7.
##
## texpr -> LPAREN . texpr RPAREN [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD LBRACE UNPAIR
##
## Ends in an error in state: 8.
##
## texpr -> LBRACE . loption(separated_nonempty_list(SEMICOLON,fieldtype)) RBRACE [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD LBRACE ID UNPAIR
##
## Ends in an error in state: 9.
##
## fieldtype -> ID . COLON texpr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD LBRACE ID COLON UNPAIR
##
## Ends in an error in state: 10.
##
## fieldtype -> ID COLON . texpr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD LBRACE ID COLON BOOLTYPE RPAREN
##
## Ends in an error in state: 14.
##
## fieldtype -> ID COLON texpr . [ SEMICOLON RBRACE ]
## texpr -> texpr . ARROW texpr [ TIMES SEMICOLON RBRACE ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES SEMICOLON RBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## ID COLON texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE TIMES UNPAIR
##
## Ends in an error in state: 15.
##
## texpr -> texpr TIMES . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## texpr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ARROW UNPAIR
##
## Ends in an error in state: 17.
##
## texpr -> texpr ARROW . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## texpr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ARROW BOOLTYPE UNPAIR
##
## Ends in an error in state: 18.
##
## texpr -> texpr . ARROW texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
## texpr -> texpr ARROW texpr . [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## texpr ARROW texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD LBRACE ID COLON BOOLTYPE SEMICOLON UNPAIR
##
## Ends in an error in state: 23.
##
## separated_nonempty_list(SEMICOLON,fieldtype) -> fieldtype SEMICOLON . separated_nonempty_list(SEMICOLON,fieldtype) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## fieldtype SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD LPAREN BOOLTYPE SEMICOLON
##
## Ends in an error in state: 25.
##
## texpr -> texpr . ARROW texpr [ TIMES RPAREN ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES RPAREN ARROW ]
## texpr -> LPAREN texpr . RPAREN [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE SEMICOLON
##
## Ends in an error in state: 28.
##
## abstract_method_decl -> METHOD texpr . ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
## texpr -> texpr . ARROW texpr [ TIMES ID ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## METHOD texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID UNPAIR
##
## Ends in an error in state: 29.
##
## abstract_method_decl -> METHOD texpr ID . LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN UNPAIR
##
## Ends in an error in state: 30.
##
## abstract_method_decl -> METHOD texpr ID LPAREN . loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN ID UNPAIR
##
## Ends in an error in state: 31.
##
## formal_par -> ID . option(type_annotation) [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID COLON UNPAIR
##
## Ends in an error in state: 32.
##
## type_annotation -> COLON . texpr [ RPAREN EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID COLON BOOLTYPE SEMICOLON
##
## Ends in an error in state: 33.
##
## texpr -> texpr . ARROW texpr [ TIMES RPAREN EQUALS COMMA ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES RPAREN EQUALS COMMA ARROW ]
## type_annotation -> COLON texpr . [ RPAREN EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## COLON texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN ID COLON BOOLTYPE EQUALS
##
## Ends in an error in state: 39.
##
## separated_nonempty_list(COMMA,formal_par) -> formal_par . [ RPAREN ]
## separated_nonempty_list(COMMA,formal_par) -> formal_par . COMMA separated_nonempty_list(COMMA,formal_par) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## formal_par
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production type_annotation -> COLON texpr
## In state 34, spurious reduction of production option(type_annotation) -> type_annotation
## In state 35, spurious reduction of production formal_par -> ID option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 40.
##
## separated_nonempty_list(COMMA,formal_par) -> formal_par COMMA . separated_nonempty_list(COMMA,formal_par) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## formal_par COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 44.
##
## list(abstract_method_decl) -> abstract_method_decl . list(abstract_method_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## abstract_method_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNPAIR
##
## Ends in an error in state: 46.
##
## iface_or_class_decl -> CLASS . ID EXTENDS ID option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID UNPAIR
##
## Ends in an error in state: 47.
##
## iface_or_class_decl -> CLASS ID . EXTENDS ID option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS UNPAIR
##
## Ends in an error in state: 48.
##
## iface_or_class_decl -> CLASS ID EXTENDS . ID option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID UNPAIR
##
## Ends in an error in state: 49.
##
## iface_or_class_decl -> CLASS ID EXTENDS ID . option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID IMPLEMENTS UNPAIR
##
## Ends in an error in state: 50.
##
## implements_declaration -> IMPLEMENTS . ID [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IMPLEMENTS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID IMPLEMENTS ID UNPAIR
##
## Ends in an error in state: 52.
##
## iface_or_class_decl -> CLASS ID EXTENDS ID option(implements_declaration) . LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID option(implements_declaration)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE UNPAIR
##
## Ends in an error in state: 53.
##
## iface_or_class_decl -> CLASS ID EXTENDS ID option(implements_declaration) LBRACE . list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID option(implements_declaration) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD UNPAIR
##
## Ends in an error in state: 54.
##
## obj_fields -> FIELD . ID [ RBRACE METHOD FIELD ]
## obj_fields -> FIELD . texpr ID [ RBRACE METHOD FIELD ]
##
## The known suffix of the stack is as follows:
## FIELD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD ID UNPAIR
##
## Ends in an error in state: 55.
##
## obj_fields -> FIELD ID . [ RBRACE METHOD FIELD ]
## texpr -> ID . [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## FIELD ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD BOOLTYPE SEMICOLON
##
## Ends in an error in state: 56.
##
## obj_fields -> FIELD texpr . ID [ RBRACE METHOD FIELD ]
## texpr -> texpr . ARROW texpr [ TIMES ID ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## FIELD texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD ID ID UNPAIR
##
## Ends in an error in state: 58.
##
## list(obj_fields) -> obj_fields . list(obj_fields) [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## obj_fields
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD UNPAIR
##
## Ends in an error in state: 61.
##
## method_decl -> METHOD . ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
## method_decl -> METHOD . texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID UNPAIR
##
## Ends in an error in state: 62.
##
## method_decl -> METHOD ID . LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
## texpr -> ID . [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## METHOD ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN UNPAIR
##
## Ends in an error in state: 63.
##
## method_decl -> METHOD ID LPAREN . loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 65.
##
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN . LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE UNITTYPE
##
## Ends in an error in state: 66.
##
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE . expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR UNPAIR
##
## Ends in an error in state: 67.
##
## expr -> UNPAIR . LPAREN ID COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN UNPAIR
##
## Ends in an error in state: 68.
##
## expr -> UNPAIR LPAREN . ID COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID UNPAIR
##
## Ends in an error in state: 69.
##
## expr -> UNPAIR LPAREN ID . COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 70.
##
## expr -> UNPAIR LPAREN ID COMMA . ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 71.
##
## expr -> UNPAIR LPAREN ID COMMA ID . RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN UNPAIR
##
## Ends in an error in state: 72.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS UNITTYPE
##
## Ends in an error in state: 73.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TL UNPAIR
##
## Ends in an error in state: 74.
##
## expr -> TL . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## TL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TL LPAREN UNITTYPE
##
## Ends in an error in state: 75.
##
## expr -> TL LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## TL LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER UNPAIR
##
## Ends in an error in state: 76.
##
## expr -> SUPER . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER ID UNPAIR
##
## Ends in an error in state: 77.
##
## expr -> SUPER ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER ID LPAREN UNITTYPE
##
## Ends in an error in state: 78.
##
## expr -> SUPER ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUM UNPAIR
##
## Ends in an error in state: 79.
##
## expr -> SUM . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUM LPAREN UNITTYPE
##
## Ends in an error in state: 80.
##
## expr -> SUM LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUM LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SND UNPAIR
##
## Ends in an error in state: 81.
##
## expr -> SND . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SND LPAREN UNITTYPE
##
## Ends in an error in state: 82.
##
## expr -> SND LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SND LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF UNPAIR
##
## Ends in an error in state: 83.
##
## expr -> SETREF . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SETREF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN UNITTYPE
##
## Ends in an error in state: 84.
##
## expr -> SETREF LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET UNPAIR
##
## Ends in an error in state: 85.
##
## expr -> SET . ID EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET ID UNPAIR
##
## Ends in an error in state: 86.
##
## expr -> SET ID . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET ID EQUALS UNITTYPE
##
## Ends in an error in state: 87.
##
## expr -> SET ID EQUALS . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND UNITTYPE
##
## Ends in an error in state: 88.
##
## expr -> SEND . expr ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROD UNPAIR
##
## Ends in an error in state: 90.
##
## expr -> PROD . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROD LPAREN UNITTYPE
##
## Ends in an error in state: 91.
##
## expr -> PROD LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROD LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC UNPAIR
##
## Ends in an error in state: 92.
##
## expr -> PROC . LPAREN ID option(type_annotation) RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN UNPAIR
##
## Ends in an error in state: 93.
##
## expr -> PROC LPAREN . ID option(type_annotation) RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID UNPAIR
##
## Ends in an error in state: 94.
##
## expr -> PROC LPAREN ID . option(type_annotation) RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID COLON BOOLTYPE EQUALS
##
## Ends in an error in state: 95.
##
## expr -> PROC LPAREN ID option(type_annotation) . RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production type_annotation -> COLON texpr
## In state 34, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID RPAREN UNPAIR
##
## Ends in an error in state: 96.
##
## expr -> PROC LPAREN ID option(type_annotation) RPAREN . LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID RPAREN LBRACE UNITTYPE
##
## Ends in an error in state: 97.
##
## expr -> PROC LPAREN ID option(type_annotation) RPAREN LBRACE . expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR UNPAIR
##
## Ends in an error in state: 98.
##
## expr -> PAIR . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PAIR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN UNITTYPE
##
## Ends in an error in state: 99.
##
## expr -> PAIR LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE UNPAIR
##
## Ends in an error in state: 100.
##
## expr -> NODE . LPAREN expr COMMA expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN UNITTYPE
##
## Ends in an error in state: 101.
##
## expr -> NODE LPAREN . expr COMMA expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEWREF UNPAIR
##
## Ends in an error in state: 102.
##
## expr -> NEWREF . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEWREF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEWREF LPAREN UNITTYPE
##
## Ends in an error in state: 103.
##
## expr -> NEWREF LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW UNPAIR
##
## Ends in an error in state: 104.
##
## expr -> NEW . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW ID UNPAIR
##
## Ends in an error in state: 105.
##
## expr -> NEW ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW ID LPAREN UNITTYPE
##
## Ends in an error in state: 106.
##
## expr -> NEW ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN UNPAIR
##
## Ends in an error in state: 107.
##
## expr -> MIN . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MIN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN UNITTYPE
##
## Ends in an error in state: 108.
##
## expr -> MIN LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MAXL UNPAIR
##
## Ends in an error in state: 109.
##
## expr -> MAXL . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MAXL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MAXL LPAREN UNITTYPE
##
## Ends in an error in state: 110.
##
## expr -> MAXL LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MAXL LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN UNITTYPE
##
## Ends in an error in state: 111.
##
## expr -> LPAREN . expr expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . MINUS expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN MINUS UNITTYPE
##
## Ends in an error in state: 113.
##
## expr -> LPAREN MINUS . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LIST UNPAIR
##
## Ends in an error in state: 114.
##
## expr -> LIST . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LIST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LIST LPAREN UNITTYPE
##
## Ends in an error in state: 115.
##
## expr -> LIST LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LIST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC UNPAIR
##
## Ends in an error in state: 116.
##
## expr -> LETREC . nonempty_list(letrecdec) IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LETREC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID UNPAIR
##
## Ends in an error in state: 117.
##
## letrecdec -> ID . LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN UNPAIR
##
## Ends in an error in state: 118.
##
## letrecdec -> ID LPAREN . ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID UNPAIR
##
## Ends in an error in state: 119.
##
## letrecdec -> ID LPAREN ID . option(type_annotation) RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID COLON BOOLTYPE EQUALS
##
## Ends in an error in state: 120.
##
## letrecdec -> ID LPAREN ID option(type_annotation) . RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production type_annotation -> COLON texpr
## In state 34, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN UNPAIR
##
## Ends in an error in state: 121.
##
## letrecdec -> ID LPAREN ID option(type_annotation) RPAREN . option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN COLON BOOLTYPE RPAREN
##
## Ends in an error in state: 122.
##
## letrecdec -> ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) . EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production type_annotation -> COLON texpr
## In state 34, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS UNITTYPE
##
## Ends in an error in state: 123.
##
## letrecdec -> ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS . expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET UNPAIR
##
## Ends in an error in state: 124.
##
## expr -> LET . ID EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LET . LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE UNPAIR
##
## Ends in an error in state: 125.
##
## expr -> LET LANGLE . loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE ID UNPAIR
##
## Ends in an error in state: 126.
##
## separated_nonempty_list(COMMA,ID) -> ID . [ RANGLE ]
## separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ RANGLE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE ID COMMA UNPAIR
##
## Ends in an error in state: 127.
##
## separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ RANGLE ]
##
## The known suffix of the stack is as follows:
## ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE UNPAIR
##
## Ends in an error in state: 131.
##
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS UNITTYPE
##
## Ends in an error in state: 132.
##
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE UNPAIR
##
## Ends in an error in state: 133.
##
## expr -> LBRACE . loption(separated_nonempty_list(SEMICOLON,field)) RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID UNPAIR
##
## Ends in an error in state: 134.
##
## field -> ID . EQUALS expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALS UNITTYPE
##
## Ends in an error in state: 135.
##
## field -> ID EQUALS . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE UNITTYPE
##
## Ends in an error in state: 136.
##
## expr -> LANGLE . loption(separated_nonempty_list(COMMA,expr)) RANGLE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISZERO UNPAIR
##
## Ends in an error in state: 137.
##
## expr -> ISZERO . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ISZERO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISZERO LPAREN UNITTYPE
##
## Ends in an error in state: 138.
##
## expr -> ISZERO LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF UNPAIR
##
## Ends in an error in state: 140.
##
## expr -> INSTANCEOF . LPAREN expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN UNITTYPE
##
## Ends in an error in state: 141.
##
## expr -> INSTANCEOF LPAREN . expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF UNITTYPE
##
## Ends in an error in state: 142.
##
## expr -> IF . expr THEN expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: HD UNPAIR
##
## Ends in an error in state: 144.
##
## expr -> HD . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## HD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: HD LPAREN UNITTYPE
##
## Ends in an error in state: 145.
##
## expr -> HD LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## HD LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FST UNPAIR
##
## Ends in an error in state: 146.
##
## expr -> FST . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## FST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FST LPAREN UNITTYPE
##
## Ends in an error in state: 147.
##
## expr -> FST LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## FST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYPRED UNPAIR
##
## Ends in an error in state: 149.
##
## expr -> EMPTYPRED . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYPRED LPAREN UNITTYPE
##
## Ends in an error in state: 150.
##
## expr -> EMPTYPRED LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEREF UNPAIR
##
## Ends in an error in state: 152.
##
## expr -> DEREF . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEREF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEREF LPAREN UNITTYPE
##
## Ends in an error in state: 153.
##
## expr -> DEREF LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEBUG UNPAIR
##
## Ends in an error in state: 154.
##
## expr -> DEBUG . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEBUG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEBUG LPAREN UNITTYPE
##
## Ends in an error in state: 155.
##
## expr -> DEBUG LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS UNPAIR
##
## Ends in an error in state: 156.
##
## expr -> CONS . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN UNITTYPE
##
## Ends in an error in state: 157.
##
## expr -> CONS LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST UNPAIR
##
## Ends in an error in state: 158.
##
## expr -> CAST . LPAREN expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN UNITTYPE
##
## Ends in an error in state: 159.
##
## expr -> CAST LPAREN . expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET UNITTYPE
##
## Ends in an error in state: 160.
##
## expr -> CASET . expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN UNITTYPE
##
## Ends in an error in state: 161.
##
## expr -> BEGIN . loption(separated_nonempty_list(SEMICOLON,expr)) END [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## BEGIN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: AVG UNPAIR
##
## Ends in an error in state: 162.
##
## expr -> AVG . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## AVG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: AVG LPAREN UNITTYPE
##
## Ends in an error in state: 163.
##
## expr -> AVG LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## AVG LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ABS UNPAIR
##
## Ends in an error in state: 164.
##
## expr -> ABS . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ABS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ABS LPAREN UNITTYPE
##
## Ends in an error in state: 165.
##
## expr -> ABS LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ABS LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ABS LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 166.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> ABS LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## ABS LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST TIMES UNITTYPE
##
## Ends in an error in state: 167.
##
## expr -> expr TIMES . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST TIMES EMPTYLIST UNITTYPE
##
## Ends in an error in state: 168.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr TIMES expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr TIMES expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST DOT UNPAIR
##
## Ends in an error in state: 169.
##
## expr -> expr DOT . ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST PLUS UNITTYPE
##
## Ends in an error in state: 172.
##
## expr -> expr PLUS . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST PLUS EMPTYLIST UNITTYPE
##
## Ends in an error in state: 173.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr PLUS expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST DIVIDED UNITTYPE
##
## Ends in an error in state: 174.
##
## expr -> expr DIVIDED . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DIVIDED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST DIVIDED EMPTYLIST UNITTYPE
##
## Ends in an error in state: 175.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr DIVIDED expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DIVIDED expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST MINUS UNITTYPE
##
## Ends in an error in state: 176.
##
## expr -> expr MINUS . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST MINUS EMPTYLIST UNITTYPE
##
## Ends in an error in state: 177.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr MINUS expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: AVG LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 179.
##
## expr -> AVG LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## AVG LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE EMPTYLIST UNPAIR
##
## Ends in an error in state: 181.
##
## expr -> expr . PLUS expr [ TIMES RPAREN RANGLE PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RPAREN RANGLE PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RPAREN RANGLE PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN RANGLE PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RPAREN RANGLE PLUS MINUS DOT DIVIDED COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN RANGLE ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN RANGLE ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 182.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN RANGLE ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN EMPTYLIST UNPAIR
##
## Ends in an error in state: 187.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . [ END ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . SEMICOLON separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN EMPTYLIST SEMICOLON UNITTYPE
##
## Ends in an error in state: 188.
##
## separated_nonempty_list(SEMICOLON,expr) -> expr SEMICOLON . separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST UNPAIR
##
## Ends in an error in state: 190.
##
## expr -> expr . PLUS expr [ TIMES PLUS OF MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS OF MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS OF MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS OF MINUS DOT DIVIDED ]
## expr -> CASET expr . OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS OF MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## CASET expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF UNPAIR
##
## Ends in an error in state: 191.
##
## expr -> CASET expr OF . LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE UNPAIR
##
## Ends in an error in state: 192.
##
## expr -> CASET expr OF LBRACE . EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE UNPAIR
##
## Ends in an error in state: 193.
##
## expr -> CASET expr OF LBRACE EMPTYTREE . ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW UNITTYPE
##
## Ends in an error in state: 194.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW . expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST UNPAIR
##
## Ends in an error in state: 195.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr . COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA UNPAIR
##
## Ends in an error in state: 196.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA . NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE UNPAIR
##
## Ends in an error in state: 197.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE . LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN UNPAIR
##
## Ends in an error in state: 198.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN . ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID UNPAIR
##
## Ends in an error in state: 199.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID . COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 200.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA . ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 201.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID . COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID COMMA ID COMMA UNPAIR
##
## Ends in an error in state: 202.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA . ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID COMMA ID COMMA ID UNPAIR
##
## Ends in an error in state: 203.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID . RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN UNPAIR
##
## Ends in an error in state: 204.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN . ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW UNITTYPE
##
## Ends in an error in state: 205.
##
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW . expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET EMPTYLIST OF LBRACE EMPTYTREE ARROW EMPTYLIST COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW EMPTYLIST UNPAIR
##
## Ends in an error in state: 206.
##
## expr -> expr . PLUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr . RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 208.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> CAST LPAREN expr . COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN EMPTYLIST COMMA UNPAIR
##
## Ends in an error in state: 209.
##
## expr -> CAST LPAREN expr COMMA . ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN EMPTYLIST COMMA ID UNPAIR
##
## Ends in an error in state: 210.
##
## expr -> CAST LPAREN expr COMMA ID . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN expr COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 212.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> CONS LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 213.
##
## expr -> CONS LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN EMPTYLIST COMMA EMPTYLIST UNPAIR
##
## Ends in an error in state: 214.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> CONS LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEBUG LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 216.
##
## expr -> DEBUG LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEREF LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 218.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> DEREF LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYPRED LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 220.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> EMPTYPRED LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FST LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 222.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> FST LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## FST LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: HD LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 224.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> HD LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## HD LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF EMPTYLIST UNPAIR
##
## Ends in an error in state: 226.
##
## expr -> expr . PLUS expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> IF expr . THEN expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES THEN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF EMPTYLIST THEN UNITTYPE
##
## Ends in an error in state: 227.
##
## expr -> IF expr THEN . expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF EMPTYLIST THEN EMPTYLIST UNPAIR
##
## Ends in an error in state: 228.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> IF expr THEN expr . ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF EMPTYLIST THEN EMPTYLIST ELSE UNITTYPE
##
## Ends in an error in state: 229.
##
## expr -> IF expr THEN expr ELSE . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF EMPTYLIST THEN EMPTYLIST ELSE EMPTYLIST UNITTYPE
##
## Ends in an error in state: 230.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> IF expr THEN expr ELSE expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 231.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> INSTANCEOF LPAREN expr . COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN EMPTYLIST COMMA UNPAIR
##
## Ends in an error in state: 232.
##
## expr -> INSTANCEOF LPAREN expr COMMA . ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN EMPTYLIST COMMA ID UNPAIR
##
## Ends in an error in state: 233.
##
## expr -> INSTANCEOF LPAREN expr COMMA ID . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN expr COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISZERO LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 235.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> ISZERO LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE EMPTYLIST RPAREN
##
## Ends in an error in state: 237.
##
## expr -> LANGLE loption(separated_nonempty_list(COMMA,expr)) . RANGLE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LANGLE loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALS EMPTYLIST UNPAIR
##
## Ends in an error in state: 239.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## field -> ID EQUALS expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALS EMPTYLIST SEMICOLON UNPAIR
##
## Ends in an error in state: 244.
##
## separated_nonempty_list(SEMICOLON,field) -> field SEMICOLON . separated_nonempty_list(SEMICOLON,field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS EMPTYLIST UNPAIR
##
## Ends in an error in state: 246.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS IN DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS EMPTYLIST IN UNITTYPE
##
## Ends in an error in state: 247.
##
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS EMPTYLIST IN EMPTYLIST UNITTYPE
##
## Ends in an error in state: 248.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID UNPAIR
##
## Ends in an error in state: 249.
##
## expr -> LET ID . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS UNITTYPE
##
## Ends in an error in state: 250.
##
## expr -> LET ID EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS EMPTYLIST UNPAIR
##
## Ends in an error in state: 251.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> LET ID EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS IN DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS EMPTYLIST IN UNITTYPE
##
## Ends in an error in state: 252.
##
## expr -> LET ID EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS EMPTYLIST IN EMPTYLIST UNITTYPE
##
## Ends in an error in state: 253.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LET ID EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS EMPTYLIST UNPAIR
##
## Ends in an error in state: 254.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN ID DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN ID DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN ID DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN ID DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS IN ID DOT DIVIDED ]
## letrecdec -> ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr . [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS EMPTYLIST IN UNITTYPE
##
## Ends in an error in state: 256.
##
## expr -> LETREC nonempty_list(letrecdec) IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LETREC nonempty_list(letrecdec) IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS EMPTYLIST IN EMPTYLIST UNITTYPE
##
## Ends in an error in state: 257.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LETREC nonempty_list(letrecdec) IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LETREC nonempty_list(letrecdec) IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LIST LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 260.
##
## expr -> LIST LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LIST LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN MINUS EMPTYLIST UNPAIR
##
## Ends in an error in state: 262.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> LPAREN MINUS expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN EMPTYLIST THEN
##
## Ends in an error in state: 264.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN expr . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 266.
##
## expr -> LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN EMPTYLIST COMMA EMPTYLIST UNPAIR
##
## Ends in an error in state: 267.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN EMPTYLIST EMPTYLIST UNPAIR
##
## Ends in an error in state: 269.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> LPAREN expr expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN expr expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MAXL LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 271.
##
## expr -> MAXL LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MAXL LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 273.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> MIN LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 274.
##
## expr -> MIN LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN EMPTYLIST COMMA EMPTYLIST UNPAIR
##
## Ends in an error in state: 275.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> MIN LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW ID LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 277.
##
## expr -> NEW ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW ID LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEWREF LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 279.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> NEWREF LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 281.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> NODE LPAREN expr . COMMA expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 282.
##
## expr -> NODE LPAREN expr COMMA . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN EMPTYLIST COMMA EMPTYLIST UNPAIR
##
## Ends in an error in state: 283.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> NODE LPAREN expr COMMA expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN EMPTYLIST COMMA EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 284.
##
## expr -> NODE LPAREN expr COMMA expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN EMPTYLIST COMMA EMPTYLIST COMMA EMPTYLIST UNPAIR
##
## Ends in an error in state: 285.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> NODE LPAREN expr COMMA expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 287.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> PAIR LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 288.
##
## expr -> PAIR LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN EMPTYLIST COMMA EMPTYLIST UNPAIR
##
## Ends in an error in state: 289.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> PAIR LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID RPAREN LBRACE EMPTYLIST UNPAIR
##
## Ends in an error in state: 291.
##
## expr -> expr . PLUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> PROC LPAREN ID option(type_annotation) RPAREN LBRACE expr . RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation) RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROD LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 293.
##
## expr -> PROD LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROD LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND EMPTYLIST UNPAIR
##
## Ends in an error in state: 295.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> SEND expr . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND EMPTYLIST ID UNPAIR
##
## Ends in an error in state: 296.
##
## expr -> SEND expr ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND EMPTYLIST ID LPAREN UNITTYPE
##
## Ends in an error in state: 297.
##
## expr -> SEND expr ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND EMPTYLIST ID LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 298.
##
## expr -> SEND expr ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr ID LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET ID EQUALS EMPTYLIST UNITTYPE
##
## Ends in an error in state: 300.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> SET ID EQUALS expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 301.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> SETREF LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN EMPTYLIST COMMA UNITTYPE
##
## Ends in an error in state: 302.
##
## expr -> SETREF LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN EMPTYLIST COMMA EMPTYLIST UNPAIR
##
## Ends in an error in state: 303.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> SETREF LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SND LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 305.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> SND LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## SND LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUM LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 307.
##
## expr -> SUM LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUM LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER ID LPAREN EMPTYLIST RANGLE
##
## Ends in an error in state: 309.
##
## expr -> SUPER ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER ID LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 181, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 178, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TL LPAREN EMPTYLIST UNPAIR
##
## Ends in an error in state: 311.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> TL LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## TL LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS EMPTYLIST UNPAIR
##
## Ends in an error in state: 313.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS IN DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS EMPTYLIST IN UNITTYPE
##
## Ends in an error in state: 314.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS EMPTYLIST IN EMPTYLIST UNITTYPE
##
## Ends in an error in state: 315.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MINUS MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IN IF ID HD FST EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE EMPTYLIST UNPAIR
##
## Ends in an error in state: 316.
##
## expr -> expr . PLUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr . RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD BOOLTYPE SEMICOLON
##
## Ends in an error in state: 318.
##
## method_decl -> METHOD texpr . ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
## texpr -> texpr . ARROW texpr [ TIMES ID ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## METHOD texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID UNPAIR
##
## Ends in an error in state: 319.
##
## method_decl -> METHOD texpr ID . LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN UNPAIR
##
## Ends in an error in state: 320.
##
## method_decl -> METHOD texpr ID LPAREN . loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 322.
##
## method_decl -> METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN . LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN RPAREN LBRACE UNITTYPE
##
## Ends in an error in state: 323.
##
## method_decl -> METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE . expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN RPAREN LBRACE EMPTYLIST UNPAIR
##
## Ends in an error in state: 324.
##
## expr -> expr . PLUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## method_decl -> METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr . RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE EMPTYLIST RBRACE UNPAIR
##
## Ends in an error in state: 326.
##
## list(method_decl) -> method_decl . list(method_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## method_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST UNPAIR
##
## Ends in an error in state: 333.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## prog -> list(iface_or_class_decl) expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(iface_or_class_decl) expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE RBRACE UNITTYPE
##
## Ends in an error in state: 335.
##
## list(iface_or_class_decl) -> iface_or_class_decl . list(iface_or_class_decl) [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MIN MAXL LPAREN LIST LETREC LET LBRACE LANGLE ISZERO INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## iface_or_class_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

